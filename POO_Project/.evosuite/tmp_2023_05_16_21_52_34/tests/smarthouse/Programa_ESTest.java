/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 21:09:04 GMT 2023
 */

package smarthouse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.ProtocolFamily;
import java.net.StandardProtocolFamily;
import java.nio.CharBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.channels.NotYetConnectedException;
import java.nio.file.Path;
import java.time.LocalDate;
import java.util.NoSuchElementException;
import java.util.Scanner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import smarthouse.Programa;
import smarthouse.Simulador;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Programa_ESTest extends Programa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Scanner scanner0 = new Scanner("Ho}*HGFB&}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Programa.guardarEstadoAtual((Simulador) null, scanner0);
      assertEquals(10, scanner0.radix());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Scanner scanner0 = new Scanner("\n+--------------------------------------------------+");
      String string0 = Programa.escolherFicheiro("", scanner0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Scanner scanner0 = new Scanner(charBuffer0);
      // Undeclared exception!
      try { 
        Programa.guardarEstadoAtual((Simulador) null, scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Scanner scanner0 = new Scanner("@A}*HGFB&}");
      scanner0.close();
      // Undeclared exception!
      try { 
        Programa.guardarEstadoAtual((Simulador) null, scanner0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Programa.guardarEstadoAtual((Simulador) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Scanner scanner0 = new Scanner(path0);
      // Undeclared exception!
      try { 
        Programa.escolherFicheiro("", scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      Scanner scanner0 = new Scanner(datagramChannel0);
      // Undeclared exception!
      try { 
        Programa.escolherFicheiro("", scanner0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Programa.escolherFicheiro("", (Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.Programa", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Scanner scanner0 = new Scanner("| -> Escolha ficheiro a ser carregado:             |");
      scanner0.close();
      // Undeclared exception!
      try { 
        Programa.escolherFicheiro("", scanner0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Programa.guardarEstadoAtual((Simulador) null, "| -> Escolha ficheiro a ser carregado:             |");
      Scanner scanner0 = new Scanner("| -> Escolha ficheiro a ser carregado:             |");
      String string0 = Programa.escolherFicheiro("", scanner0);
      assertEquals("| -> Escolha ficheiro a ser carregado:             |", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SystemInUtil.addInputLine("3");
      // Undeclared exception!
      try { 
        Programa.main(stringArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemInUtil.addInputLine("2");
      // Undeclared exception!
      try { 
        Programa.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.Programa", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SystemInUtil.addInputLine("1");
      // Undeclared exception!
      try { 
        Programa.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.Programa", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemInUtil.addInputLine("| 2. Avancar para a data X                         |");
      Programa.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Programa.guardarEstadoAtual((Simulador) null, (Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.Programa", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Simulador simulador0 = new Simulador((LocalDate) null);
      Programa.guardarEstadoAtual(simulador0, "");
      assertTrue(simulador0.getFaseInicial());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Programa programa0 = new Programa();
  }
}
