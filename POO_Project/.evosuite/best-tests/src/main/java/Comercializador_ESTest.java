/*
 * This file was automatically generated by EvoSuite
 * Tue May 09 08:48:31 GMT 2023
 */

package src.main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.nio.CharBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SocketChannel;
import java.nio.file.StandardOpenOption;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Scanner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import src.main.java.Comercializador;
import src.main.java.Fatura;
import src.main.java.SmartDevice;
import src.main.java.SmartSpeaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Comercializador_ESTest extends Comercializador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      comercializador0.setFatorImpostos(0.0);
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
      
      comercializador0.change();
      assertEquals(0.0, comercializador0.getFatorImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("&-", (-3350.8933), (-858.189));
      comercializador0.setCustoDiarioKwh((-858.189));
      assertEquals((-3350.8933), comercializador0.getCustoDiarioKwh(), 0.01);
      
      comercializador0.change();
      assertEquals((-858.189), comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("*XABK", 1275.55263, 1.0);
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(smartDevice_Modo0, 0, "*XABK", "*XABK", 1.0);
      double double0 = comercializador0.precoDiaPorDispositivo(smartSpeaker0);
      assertEquals(2295.994734, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Comercializador comercializador0 = Comercializador.parse("]nno", mockRandom0);
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(smartDevice_Modo0, 1, "Xk*TT.*KV-aWjg(2", "| -> Escreve o nome do comercializador que queres  |");
      smartSpeaker0.setConsumoDiario((-3228.655345597253));
      double double0 = comercializador0.precoDiaPorDispositivo(smartSpeaker0);
      assertEquals((-160.43276727986267), double0, 0.01);
      assertEquals(1.1, comercializador0.getFatorImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1227L));
      Comercializador comercializador0 = Comercializador.parse((String) null, mockRandom0);
      comercializador0.getNome();
      assertEquals(1.1, comercializador0.getFatorImpostos(), 0.01);
      assertEquals(0.05, comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("", 0.0, 0.0);
      comercializador0.getNome();
      assertEquals(0.0, comercializador0.getFatorImpostos(), 0.01);
      assertEquals(0.0, comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("Fatura para a casa de ", (-1.0), (-1.0));
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura("Fatura para a casa de ", localDate0, localDate0, (-937.08148645695), (-1.0));
      comercializador0.addFatura(fatura0);
      comercializador0.getFaturasEmitidas();
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("", 0.0, 0.0);
      double double0 = comercializador0.getFatorImpostos();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador(" ehYO", 1943.0, 1943.0);
      double double0 = comercializador0.getFatorImpostos();
      assertEquals(1943.0, comercializador0.getCustoDiarioKwh(), 0.01);
      assertEquals(1943.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("", 0.0, 700.0);
      double double0 = comercializador0.getCustoDiarioKwh();
      assertEquals(0.0, double0, 0.01);
      assertEquals(700.0, comercializador0.getFatorImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Comercializador comercializador0 = new Comercializador("az#so|", 1306.1742590045033, 1306.1742590045033, mockRandom0);
      double double0 = comercializador0.getCustoDiarioKwh();
      assertEquals(1306.1742590045033, comercializador0.getFatorImpostos(), 0.01);
      assertEquals(1306.1742590045033, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      Scanner scanner0 = new Scanner("N/");
      MockRandom mockRandom0 = new MockRandom(1199L);
      Comercializador comercializador0 = Comercializador.parse("N/A", mockRandom0);
      hashMap0.put("N/", comercializador0);
      Comercializador comercializador1 = Comercializador.escolherComercializador(hashMap0, scanner0);
      assertNotNull(comercializador1);
      assertEquals(1.1, comercializador1.getFatorImpostos(), 0.01);
      assertEquals(0.05, comercializador1.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("|   -> Por exemplo: 0.15,1.3                                                                |", 6162.859171413464, (-364.2893828384475));
      Comercializador comercializador1 = comercializador0.clone();
      assertEquals(6162.859171413464, comercializador1.getCustoDiarioKwh(), 0.01);
      assertTrue(comercializador1.equals((Object)comercializador0));
      assertEquals((-364.2893828384475), comercializador1.getFatorImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador(" ehYO", 1943.0, 1943.0);
      Comercializador comercializador1 = comercializador0.clone();
      assertTrue(comercializador1.equals((Object)comercializador0));
      assertEquals(1943.0, comercializador1.getFatorImpostos(), 0.01);
      assertEquals(1943.0, comercializador1.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("", (-1.0), 0.0);
      Comercializador comercializador1 = comercializador0.clone();
      assertEquals((-1.0), comercializador1.getCustoDiarioKwh(), 0.01);
      assertEquals(0.0, comercializador1.getFatorImpostos(), 0.01);
      assertTrue(comercializador1.equals((Object)comercializador0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      // Undeclared exception!
      try { 
        comercializador0.setFaturas((List<Fatura>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      comercializador0.setFaturasEmitidas((List<Fatura>) null);
      // Undeclared exception!
      try { 
        comercializador0.printFaturas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("", 0.0, 0.0);
      // Undeclared exception!
      try { 
        comercializador0.precoDiaPorDispositivo((SmartDevice) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.Formula", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Comercializador.parse("g", (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.Comercializador", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("", (-495.8510115231405), (-495.8510115231405));
      SocketChannel socketChannel0 = SocketChannel.open();
      Scanner scanner0 = new Scanner(socketChannel0);
      // Undeclared exception!
      try { 
        comercializador0.mudarValores(scanner0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Comercializador comercializador0 = Comercializador.parse("]nno", mockRandom0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("| -> Escreve no formato Modo,Tone,Tamanho          |", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Scanner scanner0 = new Scanner(fileChannel0);
      // Undeclared exception!
      try { 
        comercializador0.mudarValores(scanner0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      Scanner scanner0 = new Scanner("src.main.java.SmartCamera");
      // Undeclared exception!
      try { 
        comercializador0.mudarValores(scanner0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Comercializador comercializador0 = Comercializador.parse("TIkRT4Ay+xWZ|k2MZ", mockRandom0);
      // Undeclared exception!
      try { 
        comercializador0.mudarValores((Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.Comercializador", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      // Undeclared exception!
      try { 
        Comercializador.escolherComercializador(hashMap0, (Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.Comercializador", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-193), (byte)2);
      Scanner scanner0 = new Scanner(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        Comercializador.escolherComercializador(hashMap0, scanner0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comercializador comercializador0 = null;
      try {
        comercializador0 = new Comercializador((Comercializador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.Comercializador", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comercializador comercializador0 = null;
      try {
        comercializador0 = new Comercializador("]d8", 0.0, 0.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.Formula", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Comercializador comercializador0 = new Comercializador((String) null, 3029.07524542563, 3029.07524542563, mockRandom0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Scanner scanner0 = new Scanner(pushbackInputStream0);
      scanner0.close();
      // Undeclared exception!
      try { 
        comercializador0.mudarValores(scanner0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      MockRandom mockRandom0 = new MockRandom(3217L);
      Comercializador comercializador1 = Comercializador.parse("e\u0001X]t]l8ZqgCjIhA", mockRandom0);
      boolean boolean0 = comercializador1.equals(comercializador0);
      assertFalse(boolean0);
      assertEquals(1.1, comercializador1.getFatorImpostos(), 0.01);
      assertEquals("N/A", comercializador0.getNome());
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
      assertEquals(0.05, comercializador1.getCustoDiarioKwh(), 0.01);
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("", (-495.8510115231405), (-495.8510115231405));
      Comercializador comercializador1 = new Comercializador(comercializador0);
      boolean boolean0 = comercializador0.equals(comercializador1);
      assertTrue(boolean0);
      assertEquals((-495.8510115231405), comercializador1.getFatorImpostos(), 0.01);
      assertEquals((-495.8510115231405), comercializador1.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      boolean boolean0 = comercializador0.equals((Object) null);
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
      assertEquals("N/A", comercializador0.getNome());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("", (-495.8510115231405), (-495.8510115231405));
      boolean boolean0 = comercializador0.equals(comercializador0);
      assertEquals((-495.8510115231405), comercializador0.getCustoDiarioKwh(), 0.01);
      assertEquals((-495.8510115231405), comercializador0.getFatorImpostos(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("", (-495.8510115231405), (-495.8510115231405));
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      boolean boolean0 = comercializador0.equals(standardOpenOption0);
      assertFalse(boolean0);
      assertEquals((-495.8510115231405), comercializador0.getFatorImpostos(), 0.01);
      assertEquals((-495.8510115231405), comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Comercializador comercializador0 = Comercializador.parse("t_F{}*<fCHk!,{,R", mockRandom0);
      comercializador0.setFatorImpostos((-3843.801810116684));
      comercializador0.change();
      assertEquals((-3843.801810116684), comercializador0.getFatorImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      comercializador0.setCustoDiarioKwh(100);
      comercializador0.change();
      assertEquals(100.0, comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      Scanner scanner0 = new Scanner("N/");
      Comercializador comercializador0 = Comercializador.escolherComercializador(hashMap0, scanner0);
      assertNull(comercializador0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      Comercializador comercializador0 = new Comercializador();
      hashMap0.put("%.4", comercializador0);
      Scanner scanner0 = new Scanner("%.4");
      Comercializador comercializador1 = Comercializador.escolherComercializador(hashMap0, scanner0);
      assertEquals((-1.0), comercializador1.getCustoDiarioKwh(), 0.01);
      assertNotNull(comercializador1);
      assertEquals((-1.0), comercializador1.getFatorImpostos(), 0.01);
      assertEquals("N/A", comercializador1.getNome());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Scanner scanner0 = new Scanner(charBuffer0);
      // Undeclared exception!
      try { 
        Comercializador.escolherComercializador(hashMap0, scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      double double0 = comercializador0.getFatorImpostos();
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
      assertEquals("N/A", comercializador0.getNome());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      assertEquals("N/A", comercializador0.getNome());
      
      comercializador0.setNome("y!QL{2P`W#3\"RcfW");
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("| -> Escolhe o id do dispositivo que queres        |", 0.0, 0.0);
      comercializador0.addFatura((Fatura) null);
      // Undeclared exception!
      try { 
        comercializador0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      comercializador0.getFaturasEmitidas();
      assertEquals("N/A", comercializador0.getNome());
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("| -> Escolhe o id do dispositivo que queres        |", 0.0, 0.0);
      LinkedList<Fatura> linkedList0 = new LinkedList<Fatura>();
      comercializador0.setFaturas(linkedList0);
      assertEquals(0.0, comercializador0.getFatorImpostos(), 0.01);
      assertEquals(0.0, comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("| -> Escolhe o id do dispositivo que queres        |", 0.0, 0.0);
      comercializador0.printFaturas();
      assertEquals(0.0, comercializador0.getCustoDiarioKwh(), 0.01);
      assertEquals(0.0, comercializador0.getFatorImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("| -> Escolhe o id do dispositivo que queres        |", 0.0, 0.0);
      String string0 = comercializador0.toString();
      assertEquals("| -> Escolhe o id do dispositivo que queres        | (CustoKwh: 0.0000, Fator Impostos: 0.0000)", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("| -> Escolhe o id do dispositivo que queres        |", 0.0, 0.0);
      Comercializador comercializador1 = comercializador0.clone();
      assertTrue(comercializador1.equals((Object)comercializador0));
      assertEquals(0.0, comercializador1.getCustoDiarioKwh(), 0.01);
      assertEquals(0.0, comercializador1.getFatorImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      double double0 = comercializador0.getCustoDiarioKwh();
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
      assertEquals("N/A", comercializador0.getNome());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("| -> Escolhe o id do dispositivo que queres        |", 0.0, 0.0);
      comercializador0.getNome();
      assertEquals(0.0, comercializador0.getFatorImpostos(), 0.01);
      assertEquals(0.0, comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(smartDevice_Modo0, 1, "Xk*TT.*KV-a8jg(2", "| -> Escreve o nome do comercializador que queres  |");
      double double0 = comercializador0.precoDiaPorDispositivo(smartSpeaker0);
      assertEquals("N/A", comercializador0.getNome());
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8L);
      Comercializador.parse("", mockRandom0);
      Comercializador comercializador0 = Comercializador.parse("| -> Escolhe o id do dispositivo que queres        |", mockRandom0);
      assertEquals(0.07, comercializador0.getCustoDiarioKwh(), 0.01);
      assertEquals(1.3, comercializador0.getFatorImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("", (-2242.22487), 1018.04);
      Scanner scanner0 = new Scanner("");
      // Undeclared exception!
      try { 
        comercializador0.mudarValores(scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }
}
