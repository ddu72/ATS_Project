/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 21:10:57 GMT 2023
 */

package smarthouse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Scanner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import smarthouse.SmartCamera;
import smarthouse.SmartDevice;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class SmartCamera_ESTest extends SmartCamera_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SmartCamera.parse("Camera, id: , OFF, (1219x1219)", mockRandom0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"amer\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Scanner scanner0 = new Scanner("| -> Exemplo: ON,1920,1080,50                                 |");
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      int int0 = smartCamera0.getWidth();
      assertEquals(0.0, smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals(0.5, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(0, int0);
      assertEquals(0, smartCamera0.getHeight());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-643), 4, 2563.02, 2563.02);
      int int0 = smartCamera0.getWidth();
      assertEquals(4, smartCamera0.getHeight());
      assertEquals(2563.02, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(2563.02, smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals((-643), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 0, (-2883), 100.0, 0.0);
      double double0 = smartCamera0.getTamanhoFicheiro();
      assertEquals((-2883), smartCamera0.getHeight());
      assertEquals(100.0, double0, 0.01);
      assertEquals(0, smartCamera0.getWidth());
      assertEquals(0.0, smartCamera0.getConsumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-1373), (-804), (-1373), 1.0);
      double double0 = smartCamera0.getTamanhoFicheiro();
      assertEquals((-1373.0), double0, 0.01);
      assertEquals(1.0, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals((-804), smartCamera0.getHeight());
      assertEquals((-1373), smartCamera0.getWidth());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 1219, 1219, 1504.523201662792);
      int int0 = smartCamera0.getHeight();
      assertEquals(4.971325602532088, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(1219, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.setHeight((-1333));
      int int0 = smartCamera0.getHeight();
      assertEquals((-1333), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 723, 723, 0.0);
      SmartCamera smartCamera1 = smartCamera0.clone();
      assertEquals(0.0, smartCamera1.getTamanhoFicheiro(), 0.01);
      assertEquals(723, smartCamera1.getWidth());
      assertEquals(0.5, smartCamera1.getConsumoDiario(), 0.01);
      assertEquals(723, smartCamera1.getHeight());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-579), (-579), (-579), 100.0);
      SmartCamera smartCamera1 = smartCamera0.clone();
      assertEquals((-579.0), smartCamera1.getTamanhoFicheiro(), 0.01);
      assertEquals((-579), smartCamera1.getHeight());
      assertEquals((-579), smartCamera1.getWidth());
      assertEquals(100.0, smartCamera1.getConsumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 0, (-2883), 100.0, 0.0);
      smartCamera0.setCustoInstalacao((-802.0897540345));
      SmartCamera smartCamera1 = smartCamera0.clone();
      assertEquals(0.0, smartCamera1.getConsumoDiario(), 0.01);
      assertEquals(0, smartCamera1.getWidth());
      assertEquals((-2883), smartCamera1.getHeight());
      assertEquals(100.0, smartCamera1.getTamanhoFicheiro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-5265), 862, 100.0);
      SmartCamera smartCamera1 = smartCamera0.clone();
      assertEquals((-5265), smartCamera1.getWidth());
      assertEquals(862, smartCamera1.getHeight());
      assertEquals((-0.407686), smartCamera1.getConsumoDiario(), 0.01);
      assertEquals(100.0, smartCamera1.getTamanhoFicheiro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SmartCamera.parse("", (Random) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SmartCamera.parse((String) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SmartCamera.parse("O7N", mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("smarthouse.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Scanner scanner0 = new Scanner("");
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      Scanner scanner0 = new Scanner(datagramChannel0);
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("| -> Escolhe um periodo                            |");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Scanner scanner0 = new Scanner(fileChannel0);
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera((Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Scanner scanner0 = new Scanner(":eF");
      scanner0.close();
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartCamera smartCamera0 = null;
      try {
        smartCamera0 = new SmartCamera((SmartCamera) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.SmartDevice", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      SmartCamera smartCamera1 = new SmartCamera(smartCamera0);
      assertEquals(0, smartCamera1.getHeight());
      assertEquals(0.0, smartCamera1.getTamanhoFicheiro(), 0.01);
      assertEquals(0.5, smartCamera1.getConsumoDiario(), 0.01);
      assertEquals(0, smartCamera1.getWidth());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 723, 723, 0.0);
      smartCamera0.calcularConsumoDiario();
      assertEquals(0.0, smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals(723, smartCamera0.getHeight());
      assertEquals(0.5, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(723, smartCamera0.getWidth());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Scanner scanner0 = new Scanner("ON");
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("smarthouse.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      int int0 = smartCamera0.getHeight();
      assertEquals(0, smartCamera0.getWidth());
      assertEquals(0.5, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, smartCamera0.getTamanhoFicheiro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      double double0 = smartCamera0.getTamanhoFicheiro();
      assertEquals(0, smartCamera0.getHeight());
      assertEquals(0, smartCamera0.getWidth());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.5, smartCamera0.getConsumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.setWidth(0);
      assertEquals(0.5, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(0.0, smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals(0, smartCamera0.getWidth());
      assertEquals(0, smartCamera0.getHeight());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      SmartCamera smartCamera1 = smartCamera0.clone();
      assertEquals(0.5, smartCamera1.getConsumoDiario(), 0.01);
      assertEquals(0, smartCamera1.getHeight());
      assertEquals(0, smartCamera1.getWidth());
      assertEquals(0.0, smartCamera1.getTamanhoFicheiro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.setTamanhoFicheiro(0);
      assertEquals(0, smartCamera0.getHeight());
      assertEquals(0.5, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(0, smartCamera0.getWidth());
      assertEquals(0.0, smartCamera0.getTamanhoFicheiro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 1219, 1219, 1504.523201662792);
      int int0 = smartCamera0.getWidth();
      assertEquals(4.971325602532088, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(1219, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 723, 723, 0.0);
      String string0 = smartCamera0.toString();
      assertEquals(0.0, smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals(0.5, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals("Camera, id: , ON, (723x723)", string0);
  }
}
