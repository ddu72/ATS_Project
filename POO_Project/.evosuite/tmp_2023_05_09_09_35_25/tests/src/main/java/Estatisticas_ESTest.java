/*
 * This file was automatically generated by EvoSuite
 * Tue May 09 08:44:59 GMT 2023
 */

package src.main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SocketChannel;
import java.time.Clock;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Scanner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;
import src.main.java.CasaInteligente;
import src.main.java.Comercializador;
import src.main.java.Estatisticas;
import src.main.java.Periodo;
import src.main.java.Simulador;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Estatisticas_ESTest extends Estatisticas_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, (Map<String, Comercializador>) null, linkedList0);
      LocalDate localDate0 = MockLocalDate.now();
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      Integer integer0 = new Integer((-2407));
      linkedList0.add(periodo0);
      CasaInteligente casaInteligente0 = new CasaInteligente();
      linkedList0.add(periodo0);
      hashMap0.put(integer0, casaInteligente0);
      // Undeclared exception!
      try { 
        estatisticas0.estatistica1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.CasaInteligente", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, (Map<String, Comercializador>) null, linkedList0);
      Integer integer0 = new Integer((-1642));
      Comercializador comercializador0 = new Comercializador();
      CasaInteligente casaInteligente0 = new CasaInteligente("1", (-1642), comercializador0);
      hashMap0.put(integer0, casaInteligente0);
      LocalDate localDate0 = MockLocalDate.now();
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      linkedList0.add(periodo0);
      estatisticas0.estatistica1();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      HashMap<String, Comercializador> hashMap1 = new HashMap<String, Comercializador>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1466L));
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      linkedList0.add(periodo0);
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, hashMap1, linkedList0);
      Scanner scanner0 = new Scanner("SFyQUU1");
      estatisticas0.escolherEstatistica(scanner0);
      // Undeclared exception!
      try { 
        estatisticas0.estatistica4(scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas((Map<Integer, CasaInteligente>) null, hashMap0, linkedList0);
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      linkedList0.add(periodo0);
      Scanner scanner0 = new Scanner("SFyQUU1");
      // Undeclared exception!
      try { 
        estatisticas0.estatistica4(scanner0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"SFyQUU1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      HashMap<String, Comercializador> hashMap1 = new HashMap<String, Comercializador>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-741L));
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      linkedList0.add(periodo0);
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, hashMap1, linkedList0);
      // Undeclared exception!
      try { 
        estatisticas0.estatistica4((Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.Periodo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Simulador simulador0 = new Simulador(false);
      Map<Integer, CasaInteligente> map0 = simulador0.getCasasInteligentes();
      Map<String, Comercializador> map1 = simulador0.getComercializadores();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas(map0, map1, linkedList0);
      Scanner scanner0 = new Scanner("");
      // Undeclared exception!
      try { 
        estatisticas0.estatistica3(scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      HashMap<String, Comercializador> hashMap1 = new HashMap<String, Comercializador>();
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, hashMap1, linkedList0);
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      Scanner scanner0 = new Scanner(datagramChannel0);
      // Undeclared exception!
      try { 
        estatisticas0.estatistica3(scanner0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      Simulador simulador0 = new Simulador(false);
      Map<String, Comercializador> map0 = simulador0.getComercializadores();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, map0, linkedList0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" - ", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Scanner scanner0 = new Scanner(fileChannel0);
      // Undeclared exception!
      try { 
        estatisticas0.estatistica3(scanner0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      HashMap<String, Comercializador> hashMap1 = new HashMap<String, Comercializador>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, hashMap1, linkedList0);
      // Undeclared exception!
      try { 
        estatisticas0.estatistica3((Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.Comercializador", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas((Map<Integer, CasaInteligente>) null, hashMap0, linkedList0);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-196), (byte)1);
      Scanner scanner0 = new Scanner(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        estatisticas0.estatistica3(scanner0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, (Map<String, Comercializador>) null, linkedList0);
      // Undeclared exception!
      try { 
        estatisticas0.estatistica2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Simulador simulador0 = new Simulador();
      Map<Integer, CasaInteligente> map0 = simulador0.getCasasInteligentes();
      Map<String, Comercializador> map1 = simulador0.getComercializadores();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas(map0, map1, linkedList0);
      Scanner scanner0 = new Scanner("");
      // Undeclared exception!
      try { 
        estatisticas0.escolherEstatistica(scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      HashMap<String, Comercializador> hashMap1 = new HashMap<String, Comercializador>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, hashMap1, linkedList0);
      SocketChannel socketChannel0 = SocketChannel.open();
      Scanner scanner0 = new Scanner(socketChannel0);
      // Undeclared exception!
      try { 
        estatisticas0.escolherEstatistica(scanner0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Simulador simulador0 = new Simulador();
      Map<Integer, CasaInteligente> map0 = simulador0.getCasasInteligentes();
      Map<String, Comercializador> map1 = simulador0.getComercializadores();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas(map0, map1, linkedList0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("| 4. Gravar estado atual em ficheiro               |");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Scanner scanner0 = new Scanner(fileChannel0);
      // Undeclared exception!
      try { 
        estatisticas0.escolherEstatistica(scanner0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      HashMap<String, Comercializador> hashMap1 = new HashMap<String, Comercializador>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, hashMap1, linkedList0);
      // Undeclared exception!
      try { 
        estatisticas0.escolherEstatistica((Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.Estatisticas", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      HashMap<String, Comercializador> hashMap1 = new HashMap<String, Comercializador>();
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, hashMap1, linkedList0);
      Scanner scanner0 = new Scanner("SFyQUU1");
      scanner0.close();
      // Undeclared exception!
      try { 
        estatisticas0.escolherEstatistica(scanner0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      Simulador simulador0 = new Simulador(true);
      Map<String, Comercializador> map0 = simulador0.getComercializadores();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, map0, linkedList0);
      Scanner scanner0 = new Scanner("']Oon-l.");
      estatisticas0.estatistica4(scanner0);
      assertEquals("java.util.Scanner[delimiters=\\p{javaWhitespace}+][position=0][match valid=false][need input=false][source closed=false][skipped=false][group separator=\\x{2c}][decimal separator=\\x{2e}][positive prefix=][negative prefix=\\Q-\\E][positive suffix=][negative suffix=][NaN string=\\Q\uFFFD\\E][infinity string=\\Q\u221E\\E]", scanner0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      Simulador simulador0 = new Simulador(true);
      Map<String, Comercializador> map0 = simulador0.getComercializadores();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, map0, linkedList0);
      Scanner scanner0 = new Scanner("']Oon-l.");
      estatisticas0.estatistica3(scanner0);
      assertEquals(10, scanner0.radix());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      HashMap<String, Comercializador> hashMap1 = new HashMap<String, Comercializador>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Comercializador comercializador0 = new Comercializador("", (-2972), (-729));
      hashMap1.put("](1 gC`%`O+y8Img+:", comercializador0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-741L));
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      linkedList0.add(periodo0);
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, hashMap1, linkedList0);
      estatisticas0.estatistica2();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      HashMap<String, Comercializador> hashMap1 = new HashMap<String, Comercializador>();
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, hashMap1, linkedList0);
      estatisticas0.estatistica2();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas((Map<Integer, CasaInteligente>) null, hashMap0, linkedList0);
      Comercializador comercializador0 = new Comercializador();
      hashMap0.put("", comercializador0);
      estatisticas0.estatistica2();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, CasaInteligente> hashMap0 = new HashMap<Integer, CasaInteligente>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas(hashMap0, (Map<String, Comercializador>) null, linkedList0);
      LocalDate localDate0 = MockLocalDate.now();
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      linkedList0.add(periodo0);
      estatisticas0.estatistica1();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      Estatisticas estatisticas0 = new Estatisticas((Map<Integer, CasaInteligente>) null, hashMap0, linkedList0);
      estatisticas0.estatistica1();
  }
}
