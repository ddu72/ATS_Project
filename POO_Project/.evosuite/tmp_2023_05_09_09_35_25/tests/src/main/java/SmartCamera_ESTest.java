/*
 * This file was automatically generated by EvoSuite
 * Tue May 09 08:51:09 GMT 2023
 */

package src.main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.nio.channels.DatagramChannel;
import java.nio.channels.NotYetConnectedException;
import java.util.NoSuchElementException;
import java.util.Scanner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import src.main.java.SmartCamera;
import src.main.java.SmartDevice;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartCamera_ESTest extends SmartCamera_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Scanner scanner0 = new Scanner("| -> Exemplo: ON,1920,1080,50                                 |");
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      int int0 = smartCamera0.getWidth();
      assertEquals(0.5, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(0, int0);
      assertEquals(0, smartCamera0.getHeight());
      assertEquals(0.0, smartCamera0.getTamanhoFicheiro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.setWidth(1694);
      int int0 = smartCamera0.getWidth();
      assertEquals(1694, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 0, 0, 0.0, 0.0);
      double double0 = smartCamera0.getTamanhoFicheiro();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, smartCamera0.getWidth());
      assertEquals(0.0, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(0, smartCamera0.getHeight());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-1618), (-1618), 1.0, 0.0);
      double double0 = smartCamera0.getTamanhoFicheiro();
      assertEquals((-1618), smartCamera0.getWidth());
      assertEquals((-1618), smartCamera0.getHeight());
      assertEquals(0.0, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 2513, 2028, 2028, (-1275.7933868));
      int int0 = smartCamera0.getHeight();
      assertEquals((-1275.7933868), smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(2028.0, smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals(2513, smartCamera0.getWidth());
      assertEquals(2028, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-320), (-320), (-1.0));
      int int0 = smartCamera0.getHeight();
      assertEquals(0.4997952, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals((-320), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-1), (-1), 2413.68112248492);
      SmartCamera smartCamera1 = (SmartCamera)smartCamera0.clone();
      assertEquals((-1), smartCamera1.getWidth());
      assertEquals(2413.68112248492, smartCamera1.getTamanhoFicheiro(), 0.01);
      assertEquals((-1), smartCamera1.getHeight());
      assertEquals(0.5000048273622449, smartCamera1.getConsumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.setCustoInstalacao((-2395.88));
      SmartCamera smartCamera1 = (SmartCamera)smartCamera0.clone();
      assertEquals(0.0, smartCamera1.getTamanhoFicheiro(), 0.01);
      assertEquals(0.5, smartCamera1.getConsumoDiario(), 0.01);
      assertEquals(0, smartCamera1.getHeight());
      assertEquals(0, smartCamera1.getWidth());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-1618), (-1618), 1.0, 0.0);
      SmartCamera smartCamera1 = (SmartCamera)smartCamera0.clone();
      assertEquals(1.0, smartCamera1.getTamanhoFicheiro(), 0.01);
      assertEquals((-1618), smartCamera1.getWidth());
      assertEquals((-1618), smartCamera1.getHeight());
      assertEquals(0.0, smartCamera1.getConsumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-2351), (-2351), (-2351), (-2351));
      SmartCamera smartCamera1 = (SmartCamera)smartCamera0.clone();
      assertEquals((-2351.0), smartCamera1.getConsumoDiario(), 0.01);
      assertEquals((-2351), smartCamera1.getHeight());
      assertEquals((-2351), smartCamera1.getWidth());
      assertEquals((-2351.0), smartCamera1.getTamanhoFicheiro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1233L);
      // Undeclared exception!
      try { 
        SmartCamera.parse(",", mockRandom0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SmartCamera.parse("x\"`D*)XOc#2Q", mockRandom0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"`D*)XOc#2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2028);
      // Undeclared exception!
      try { 
        SmartCamera.parse((String) null, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SmartCamera.parse("$74'", mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("src.main.java.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Scanner scanner0 = new Scanner(mockFileInputStream0);
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      Scanner scanner0 = new Scanner(datagramChannel0);
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera((Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Scanner scanner0 = new Scanner("7'YZHK\"P2");
      scanner0.close();
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartCamera smartCamera0 = null;
      try {
        smartCamera0 = new SmartCamera((SmartCamera) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.SmartDevice", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.calcularConsumoDiario();
      assertEquals(0, smartCamera0.getHeight());
      assertEquals(0.5, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(0.0, smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals(0, smartCamera0.getWidth());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Scanner scanner0 = new Scanner("ON");
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("src.main.java.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Scanner scanner0 = new Scanner("OFF");
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("src.main.java.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      int int0 = smartCamera0.getHeight();
      assertEquals(0.0, smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals(0, smartCamera0.getWidth());
      assertEquals(0.5, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.setHeight((-2047));
      assertEquals((-2047), smartCamera0.getHeight());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-1713), (-1713), (-1713), (-1713));
      int int0 = smartCamera0.getWidth();
      assertEquals((-1713), smartCamera0.getHeight());
      assertEquals((-1713.0), smartCamera0.getConsumoDiario(), 0.01);
      assertEquals((-1713), int0);
      assertEquals((-1713.0), smartCamera0.getTamanhoFicheiro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-1723), (-1723), (-1723), 222.68);
      smartCamera0.setTamanhoFicheiro((-1723.0));
      assertEquals(222.68, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals((-1723), smartCamera0.getHeight());
      assertEquals((-1723), smartCamera0.getWidth());
      assertEquals((-1723.0), smartCamera0.getTamanhoFicheiro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-1449904845), (-401), 0.0);
      SmartCamera smartCamera1 = new SmartCamera(smartCamera0);
      assertEquals((-401), smartCamera1.getHeight());
      assertEquals(0.5, smartCamera1.getConsumoDiario(), 0.01);
      assertEquals(0.0, smartCamera1.getTamanhoFicheiro(), 0.01);
      assertEquals((-1449904845), smartCamera1.getWidth());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-1723), (-1723), (-1723), 222.68);
      double double0 = smartCamera0.getTamanhoFicheiro();
      assertEquals(222.68, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals((-1723), smartCamera0.getWidth());
      assertEquals((-1723), smartCamera0.getHeight());
      assertEquals((-1723.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      String string0 = smartCamera0.toString();
      assertEquals(0.0, smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals("Camera, id: , OFF, (0x0)", string0);
      assertEquals(0.5, smartCamera0.getConsumoDiario(), 0.01);
  }
}
