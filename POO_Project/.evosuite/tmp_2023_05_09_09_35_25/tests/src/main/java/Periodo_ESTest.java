/*
 * This file was automatically generated by EvoSuite
 * Tue May 09 08:50:20 GMT 2023
 */

package src.main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.PipedInputStream;
import java.nio.channels.SocketChannel;
import java.time.Clock;
import java.time.LocalDate;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Scanner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;
import src.main.java.Periodo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Periodo_ESTest extends Periodo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Periodo periodo0 = new Periodo((LocalDate) null, (LocalDate) null);
      LocalDate localDate0 = periodo0.getInicio();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Periodo periodo0 = new Periodo((LocalDate) null, (LocalDate) null);
      LocalDate localDate0 = periodo0.getFim();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      LocalDate localDate0 = MockLocalDate.ofYearDay(1054, 1);
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      linkedList0.add(periodo0);
      Scanner scanner0 = new Scanner("X");
      // Undeclared exception!
      try { 
        Periodo.escolherPeriodo(linkedList0, scanner0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      Scanner scanner0 = new Scanner(socketChannel0);
      // Undeclared exception!
      try { 
        Periodo.escolherPeriodo((List<Periodo>) null, scanner0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Periodo periodo0 = new Periodo((LocalDate) null, (LocalDate) null);
      Periodo periodo1 = new Periodo(periodo0);
      // Undeclared exception!
      try { 
        periodo0.equals(periodo1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.Periodo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Periodo periodo0 = null;
      try {
        periodo0 = new Periodo((Periodo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.main.java.Periodo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      LocalDate localDate1 = MockLocalDate.ofEpochDay(0L);
      Periodo periodo1 = new Periodo(localDate0, localDate1);
      boolean boolean0 = periodo0.equals(periodo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      Periodo periodo1 = new Periodo((LocalDate) null, localDate0);
      boolean boolean0 = periodo0.equals(periodo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Periodo periodo0 = new Periodo((LocalDate) null, (LocalDate) null);
      Object object0 = new Object();
      boolean boolean0 = periodo0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      boolean boolean0 = periodo0.equals(periodo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Periodo periodo0 = new Periodo((LocalDate) null, (LocalDate) null);
      boolean boolean0 = periodo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Scanner scanner0 = new Scanner(pipedInputStream0);
      Periodo periodo0 = Periodo.escolherPeriodo(linkedList0, scanner0);
      assertNull(periodo0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Periodo periodo0 = new Periodo((LocalDate) null, (LocalDate) null);
      LinkedList<Periodo> linkedList0 = new LinkedList<Periodo>();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 0);
      Scanner scanner0 = new Scanner(byteArrayInputStream0);
      linkedList0.add(periodo0);
      // Undeclared exception!
      try { 
        Periodo.escolherPeriodo(linkedList0, scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      LocalDate localDate1 = periodo0.getInicio();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      String string0 = periodo0.toString();
      assertEquals("Periodo de 2014-02-14 a 2014-02-14", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      LocalDate localDate1 = periodo0.getFim();
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      Periodo periodo1 = periodo0.clone();
      assertTrue(periodo1.equals((Object)periodo0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Periodo periodo0 = new Periodo(localDate0, localDate0);
      Periodo periodo1 = new Periodo(periodo0);
      boolean boolean0 = periodo0.equals(periodo1);
      assertTrue(boolean0);
  }
}
