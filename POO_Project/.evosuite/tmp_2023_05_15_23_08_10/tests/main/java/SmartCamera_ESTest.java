/*
 * This file was automatically generated by EvoSuite
 * Mon May 15 22:26:21 GMT 2023
 */

package main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.util.NoSuchElementException;
import java.util.Scanner;
import main.java.SmartCamera;
import main.java.SmartDevice;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartCamera_ESTest extends SmartCamera_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      int int0 = smartCamera0.getWidth();
      assertEquals(0.5, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals(0, smartCamera0.getHeight());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 132, (-1828), 132);
      int int0 = smartCamera0.getWidth();
      assertEquals(0.436297856, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(132, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 815, 479, 479, 20.0);
      double double0 = smartCamera0.getTamanhoFicheiro();
      assertEquals(815, smartCamera0.getWidth());
      assertEquals(479, smartCamera0.getHeight());
      assertEquals(479.0, double0, 0.01);
      assertEquals(20.0, smartCamera0.getConsumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 987, 987, (-95.825827));
      double double0 = smartCamera0.getTamanhoFicheiro();
      assertEquals(0.313298899874474, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals((-95.825827), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 0, 2726, 5000000.0, 2726);
      int int0 = smartCamera0.getHeight();
      assertEquals(5000000.0, smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals(2726, int0);
      assertEquals(0, smartCamera0.getWidth());
      assertEquals(2726.0, smartCamera0.getConsumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-2105), (-502), (-2105));
      int int0 = smartCamera0.getHeight();
      assertEquals((-502), int0);
      assertEquals((-3.9487491000000006), smartCamera0.getConsumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.ON;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-2105), (-502), (-2105));
      SmartCamera smartCamera1 = smartCamera0.clone();
      assertEquals((-3.9487491000000006), smartCamera1.getConsumoDiario(), 0.01);
      assertEquals((-2105), smartCamera1.getWidth());
      assertEquals((-502), smartCamera1.getHeight());
      assertEquals((-2105.0), smartCamera1.getTamanhoFicheiro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.setCustoInstalacao((-36.2));
      SmartCamera smartCamera1 = smartCamera0.clone();
      assertEquals(0.0, smartCamera1.getTamanhoFicheiro(), 0.01);
      assertEquals(0, smartCamera1.getWidth());
      assertEquals(0, smartCamera1.getHeight());
      assertEquals(0.5, smartCamera1.getConsumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-554), (-554), (-554), 0.0);
      SmartCamera smartCamera1 = smartCamera0.clone();
      assertEquals((-554.0), smartCamera1.getTamanhoFicheiro(), 0.01);
      assertEquals((-554), smartCamera1.getWidth());
      assertEquals(0.0, smartCamera1.getConsumoDiario(), 0.01);
      assertEquals((-554), smartCamera1.getHeight());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SmartCamera.parse(", Tone: ", mockRandom0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SmartCamera.parse("Q", mockRandom0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(15L);
      // Undeclared exception!
      try { 
        SmartCamera.parse((String) null, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        SmartCamera.parse("s5N", mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("main.java.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Scanner scanner0 = new Scanner("");
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      Scanner scanner0 = new Scanner(datagramChannel0);
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",<t.]1j");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Scanner scanner0 = new Scanner(fileChannel0);
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera((Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartCamera smartCamera0 = null;
      try {
        smartCamera0 = new SmartCamera((SmartCamera) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.SmartDevice", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      SmartCamera smartCamera1 = new SmartCamera(smartCamera0);
      assertEquals(0, smartCamera1.getHeight());
      assertEquals(0.5, smartCamera1.getConsumoDiario(), 0.01);
      assertEquals(0.0, smartCamera1.getTamanhoFicheiro(), 0.01);
      assertEquals(0, smartCamera1.getWidth());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-554), (-554), (-554), 0.0);
      smartCamera0.calcularConsumoDiario();
      assertEquals(0.159937072, smartCamera0.getConsumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Scanner scanner0 = new Scanner("ON");
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("main.java.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Scanner scanner0 = new Scanner("OFF");
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("main.java.SmartCamera", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Scanner scanner0 = new Scanner("Camera, id: , OFF, (-554x-554)");
      // Undeclared exception!
      try { 
        SmartCamera.criarSmartCamera(scanner0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" id: \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-554), (-554), (-554), 0.0);
      smartCamera0.setHeight((-554));
      assertEquals((-554.0), smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals((-554), smartCamera0.getHeight());
      assertEquals(0.0, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals((-554), smartCamera0.getWidth());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      int int0 = smartCamera0.getHeight();
      assertEquals(0.0, smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals(0, smartCamera0.getWidth());
      assertEquals(0.5, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-1374), (-1374), 0.0, 0.0);
      double double0 = smartCamera0.getTamanhoFicheiro();
      assertEquals(0.0, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1374), smartCamera0.getWidth());
      assertEquals((-1374), smartCamera0.getHeight());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-554), (-554), (-554), 0.0);
      smartCamera0.setTamanhoFicheiro(5000000.0);
      assertEquals(5000000.0, smartCamera0.getTamanhoFicheiro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-554), (-554), (-554), 0.0);
      String string0 = smartCamera0.toString();
      assertEquals((-554.0), smartCamera0.getTamanhoFicheiro(), 0.01);
      assertEquals("Camera, id: , OFF, (-554x-554)", string0);
      assertEquals(0.0, smartCamera0.getConsumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, 516, 516, 0.5);
      SmartCamera smartCamera1 = smartCamera0.clone();
      assertEquals(516, smartCamera1.getWidth());
      assertEquals(516, smartCamera1.getHeight());
      assertEquals(0.500266256, smartCamera1.getConsumoDiario(), 0.01);
      assertEquals(0.5, smartCamera1.getTamanhoFicheiro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-554), (-554), (-554), 0.0);
      int int0 = smartCamera0.getWidth();
      assertEquals(0.0, smartCamera0.getConsumoDiario(), 0.01);
      assertEquals((-554), int0);
      assertEquals((-554), smartCamera0.getHeight());
      assertEquals((-554.0), smartCamera0.getTamanhoFicheiro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      SmartCamera smartCamera0 = new SmartCamera(smartDevice_Modo0, (-1374), (-1374), 0.0, 0.0);
      smartCamera0.setWidth(0);
      assertEquals(0, smartCamera0.getWidth());
  }
}
