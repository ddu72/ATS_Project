/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 21:05:44 GMT 2023
 */

package smarthouse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.net.ProtocolFamily;
import java.net.StandardProtocolFamily;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.time.LocalDate;
import java.time.Month;
import java.util.HashMap;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Scanner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import smarthouse.Comercializador;
import smarthouse.Fatura;
import smarthouse.SmartCamera;
import smarthouse.SmartDevice;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Comercializador_ESTest extends Comercializador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1579L);
      Comercializador comercializador0 = new Comercializador("k`u4s", (-2399.33744296), (-2399.33744296), mockRandom0);
      comercializador0.setFatorImpostos((-2399.33744296));
      comercializador0.change();
      assertEquals((-2399.33744296), comercializador0.getFatorImpostos(), 0.01);
      assertEquals((-2399.33744296), comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("3Zy;1L", 0.0, 927.40715203);
      comercializador0.setCustoDiarioKwh(0.0);
      comercializador0.change();
      assertEquals(927.40715203, comercializador0.getFatorImpostos(), 0.01);
      assertEquals(0.0, comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      Comercializador comercializador0 = Comercializador.parse("~m|^}yNL", mockRandom0);
      assertEquals(1.2, comercializador0.getFatorImpostos(), 0.01);
      assertEquals(0.060000000000000005, comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador((String) null, 0.0, 0.0);
      SmartCamera smartCamera0 = new SmartCamera();
      double double0 = comercializador0.precoDiaPorDispositivo(smartCamera0);
      assertEquals(0.0, comercializador0.getFatorImpostos(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("lambda$formula2$254e2bb9$1", 1151.22, 0.0);
      SmartCamera smartCamera0 = new SmartCamera();
      double double0 = comercializador0.precoDiaPorDispositivo(smartCamera0);
      assertEquals(0.0, comercializador0.getFatorImpostos(), 0.01);
      assertEquals(518.049, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador((String) null, 5.0, 0.0);
      comercializador0.getNome();
      assertEquals(0.0, comercializador0.getFatorImpostos(), 0.01);
      assertEquals(5.0, comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("", (-1777.0), 517.3170422438869);
      comercializador0.getNome();
      assertEquals(517.3170422438869, comercializador0.getFatorImpostos(), 0.01);
      assertEquals((-1777.0), comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      comercializador0.setFaturasEmitidas((List<Fatura>) null);
      comercializador0.getFaturasEmitidas();
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
      assertEquals("N/A", comercializador0.getNome());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Comercializador comercializador0 = new Comercializador("L5QTV@wE%PfR3E.", 0.0, 0.0, mockRandom0);
      double double0 = comercializador0.getFatorImpostos();
      assertEquals(0.0, comercializador0.getCustoDiarioKwh(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("3Zy;1L", 0.0, 927.40715203);
      double double0 = comercializador0.getFatorImpostos();
      assertEquals(927.40715203, double0, 0.01);
      assertEquals(0.0, comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("3Zy;1L", 0.0, 927.40715203);
      double double0 = comercializador0.getCustoDiarioKwh();
      assertEquals(927.40715203, comercializador0.getFatorImpostos(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador((String) null, 5.0, 0.0);
      double double0 = comercializador0.getCustoDiarioKwh();
      assertEquals(5.0, double0, 0.01);
      assertEquals(0.0, comercializador0.getFatorImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      Scanner scanner0 = new Scanner("cM~3BomRJ4)PDT");
      hashMap0.put("cM~3BomRJ4)PDT", comercializador0);
      Comercializador comercializador1 = Comercializador.escolherComercializador(hashMap0, scanner0);
      assertNotNull(comercializador1);
      assertEquals("N/A", comercializador1.getNome());
      assertEquals((-1.0), comercializador1.getFatorImpostos(), 0.01);
      assertEquals((-1.0), comercializador1.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2038L);
      Comercializador comercializador0 = new Comercializador("", 759.0, 0.0, mockRandom0);
      Comercializador comercializador1 = comercializador0.clone();
      assertEquals(0.0, comercializador1.getFatorImpostos(), 0.01);
      assertEquals(759.0, comercializador1.getCustoDiarioKwh(), 0.01);
      assertTrue(comercializador1.equals((Object)comercializador0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("3Zy;1L", 0.0, 927.40715203);
      Comercializador comercializador1 = comercializador0.clone();
      assertEquals(927.40715203, comercializador1.getFatorImpostos(), 0.01);
      assertTrue(comercializador1.equals((Object)comercializador0));
      assertEquals(0.0, comercializador1.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("RYG^nK+D", 0.0, 0.0);
      // Undeclared exception!
      try { 
        comercializador0.setFaturas((List<Fatura>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }
/*
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      comercializador0.setFaturasEmitidas((List<Fatura>) null);
      // Undeclared exception!
      try { 
        comercializador0.printFaturas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
*/

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      // Undeclared exception!
      try { 
        comercializador0.precoDiaPorDispositivo((SmartDevice) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.Formula", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Comercializador.parse("l\"", (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.Comercializador", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1318L);
      Comercializador comercializador0 = Comercializador.parse("]JLk$", mockRandom0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1157);
      Scanner scanner0 = new Scanner(pipedInputStream0);
      // Undeclared exception!
      try { 
        comercializador0.mudarValores(scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      String string0 = " (CustoKwh: ";
      String string1 = "@&,?q/*x";
      double double0 = 0.0;
      double double1 = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      Comercializador comercializador0 = new Comercializador(" (CustoKwh: ", 0.0, (-1.0), mockRandom0);
      Comercializador comercializador1 = new Comercializador(comercializador0);
      hashMap0.put(" (CustoKwh: ", comercializador1);
      MockFile mockFile0 = new MockFile(" (CustoKwh: ", "@&,?q/*x");
      MockFile mockFile1 = new MockFile(mockFile0, "@&,?q/*x");
      mockFile1.toPath();
      Comercializador.parse("@&,?q/*x", mockRandom0);
      SmartDevice.Modo smartDevice_Modo0 = SmartDevice.Modo.OFF;
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      Scanner scanner0 = new Scanner(datagramChannel0);
      // Undeclared exception!
      try { 
        comercializador1.mudarValores(scanner0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      File file0 = MockFile.createTempFile("N/A", ")");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Scanner scanner0 = new Scanner(fileChannel0);
      // Undeclared exception!
      try { 
        comercializador0.mudarValores(scanner0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      Scanner scanner0 = new Scanner("N/A (CustoKwh: -1.0000, Fator Impostos: -1.0000)");
      // Undeclared exception!
      try { 
        comercializador0.mudarValores(scanner0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador("I\"b_yIan8H", (-1291.38183), (-1291.38183));
      // Undeclared exception!
      try { 
        comercializador0.mudarValores((Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.Comercializador", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      Scanner scanner0 = new Scanner("N/A (CustoKwh: -1.0000, Fator Impostos: -1.0000)");
      scanner0.close();
      // Undeclared exception!
      try { 
        comercializador0.mudarValores(scanner0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      Scanner scanner0 = new Scanner(datagramChannel0);
      // Undeclared exception!
      try { 
        Comercializador.escolherComercializador(hashMap0, scanner0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      MockFile mockFile0 = new MockFile("q'1a:bj", "K@");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Scanner scanner0 = new Scanner(fileChannel0);
      // Undeclared exception!
      try { 
        Comercializador.escolherComercializador(hashMap0, scanner0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      // Undeclared exception!
      try { 
        Comercializador.escolherComercializador(hashMap0, (Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.Comercializador", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      Scanner scanner0 = new Scanner("cM~3BomRJ4)PDT");
      scanner0.close();
      // Undeclared exception!
      try { 
        Comercializador.escolherComercializador(hashMap0, scanner0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 78);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Scanner scanner0 = new Scanner(sequenceInputStream0);
      // Undeclared exception!
      try { 
        Comercializador.escolherComercializador(hashMap0, scanner0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      comercializador0.setFaturasEmitidas((List<Fatura>) null);
      // Undeclared exception!
      try { 
        comercializador0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.Comercializador", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comercializador comercializador0 = null;
      try {
        comercializador0 = new Comercializador((Comercializador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.Comercializador", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comercializador comercializador0 = null;
      try {
        comercializador0 = new Comercializador("", 1.0, 2945.156552503153, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.Formula", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador((String) null, 5.0, 0.9208636301817201);
      Comercializador comercializador1 = new Comercializador(":&zqb6W", 0.9208636301817201, 5.0);
      boolean boolean0 = comercializador0.equals(comercializador1);
      assertEquals(5.0, comercializador1.getFatorImpostos(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.9208636301817201, comercializador1.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      Comercializador comercializador1 = new Comercializador(comercializador0);
      boolean boolean0 = comercializador1.equals(comercializador0);
      assertTrue(boolean0);
      assertEquals((-1.0), comercializador1.getFatorImpostos(), 0.01);
      assertEquals((-1.0), comercializador1.getCustoDiarioKwh(), 0.01);
      assertEquals("N/A", comercializador1.getNome());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Comercializador comercializador0 = new Comercializador("L5QTV@wE%PfR3E.", 0.0, 0.0, mockRandom0);
      boolean boolean0 = comercializador0.equals("L5QTV@wE%PfR3E.");
      assertFalse(boolean0);
      assertEquals(0.0, comercializador0.getFatorImpostos(), 0.01);
      assertEquals(0.0, comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      boolean boolean0 = comercializador0.equals(comercializador0);
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
      assertEquals("N/A", comercializador0.getNome());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      boolean boolean0 = comercializador0.equals((Object) null);
      assertEquals("N/A", comercializador0.getNome());
      assertFalse(boolean0);
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      comercializador0.setFatorImpostos(1362.5);
      comercializador0.change();
      assertEquals(1362.5, comercializador0.getFatorImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      comercializador0.setCustoDiarioKwh((-109.84949973));
      comercializador0.change();
      assertEquals((-109.84949973), comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      Scanner scanner0 = new Scanner("Y");
      Comercializador comercializador0 = Comercializador.escolherComercializador(hashMap0, scanner0);
      assertNull(comercializador0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Comercializador comercializador0 = Comercializador.parse("cM~3BomRJ4)PDT", mockRandom0);
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      Scanner scanner0 = new Scanner("cM~3BomRJ4)PDT");
      hashMap0.put("cM~3BomRJ4)PDT", comercializador0);
      Comercializador comercializador1 = Comercializador.escolherComercializador(hashMap0, scanner0);
      assertEquals(0.05, comercializador1.getCustoDiarioKwh(), 0.01);
      assertNotNull(comercializador1);
      assertEquals(1.1, comercializador1.getFatorImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<String, Comercializador> hashMap0 = new HashMap<String, Comercializador>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Scanner scanner0 = new Scanner(pipedInputStream0);
      // Undeclared exception!
      try { 
        Comercializador.escolherComercializador(hashMap0, scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      double double0 = comercializador0.getCustoDiarioKwh();
      assertEquals("N/A", comercializador0.getNome());
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      comercializador0.setFaturasEmitidas((List<Fatura>) null);
      LocalDate localDate0 = MockLocalDate.ofYearDay((byte)11, 4);
      Fatura fatura0 = new Fatura("oF:", localDate0, localDate0, 1122, 1.0);
      // Undeclared exception!
      try { 
        comercializador0.addFatura(fatura0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.Comercializador", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      String string0 = comercializador0.toString();
      assertEquals("N/A (CustoKwh: -1.0000, Fator Impostos: -1.0000)", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      double double0 = comercializador0.getFatorImpostos();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
      assertEquals("N/A", comercializador0.getNome());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador((String) null, 5.0, (-12.661863254338215));
      SmartCamera smartCamera0 = new SmartCamera();
      double double0 = comercializador0.precoDiaPorDispositivo(smartCamera0);
      assertEquals((-26.239192322260983), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      comercializador0.printFaturas();
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
      assertEquals("N/A", comercializador0.getNome());
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      List<Fatura> list0 = comercializador0.getFaturasEmitidas();
      comercializador0.setFaturas(list0);
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
      assertEquals("N/A", comercializador0.getNome());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      Month month0 = Month.SEPTEMBER;
      LocalDate localDate0 = MockLocalDate.of(0, month0, 1);
      Fatura fatura0 = new Fatura("| -> Escreve o nome do comercializador que queres  |", localDate0, localDate0, 0, 0.0);
      comercializador0.addFatura(fatura0);
      comercializador0.getFaturasEmitidas();
      assertEquals("N/A", comercializador0.getNome());
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      assertEquals("N/A", comercializador0.getNome());
      
      comercializador0.setNome("~m|^}yNL");
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      String string0 = comercializador0.getNome();
      assertEquals((-1.0), comercializador0.getFatorImpostos(), 0.01);
      assertEquals((-1.0), comercializador0.getCustoDiarioKwh(), 0.01);
      assertEquals("N/A", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Comercializador comercializador0 = new Comercializador();
      Comercializador comercializador1 = comercializador0.clone();
      assertEquals((-1.0), comercializador1.getCustoDiarioKwh(), 0.01);
      assertEquals("N/A", comercializador1.getNome());
      assertTrue(comercializador1.equals((Object)comercializador0));
      assertEquals((-1.0), comercializador1.getFatorImpostos(), 0.01);
  }
}
