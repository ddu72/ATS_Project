/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 21:11:39 GMT 2023
 */

package smarthouse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;
import smarthouse.Fatura;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Fatura_ESTest extends Fatura_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes((-1), (-1));
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Fatura fatura0 = new Fatura((String) null, localDate0, localDate0, (-1), 0.0);
      Fatura fatura1 = new Fatura(fatura0);
      assertEquals(0.0, fatura1.getCusto(), 0.01);
      assertEquals((-1.0), fatura1.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes((-1), (-1));
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Fatura fatura0 = new Fatura((String) null, localDate0, localDate0, (-1), 0.0);
      fatura0.getNome();
      assertEquals((-1.0), fatura0.getConsumo(), 0.01);
      assertEquals(0.0, fatura0.getCusto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Fatura fatura0 = new Fatura("", localDate0, localDate0, 0.0, (-4734.63268792915));
      fatura0.getNome();
      assertEquals(0.0, fatura0.getConsumo(), 0.01);
      assertEquals((-4734.63268792915), fatura0.getCusto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Fatura fatura0 = new Fatura("", localDate0, localDate0, 0.0, 0.0);
      double double0 = fatura0.getCusto();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura("", localDate0, localDate0, (-1.0), (-1.0));
      double double0 = fatura0.getCusto();
      assertEquals((-1.0), fatura0.getConsumo(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fatura fatura0 = new Fatura("", (LocalDate) null, (LocalDate) null, 0.0, (-1.0));
      double double0 = fatura0.getConsumo();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1.0), fatura0.getCusto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura("ykuy<,_zm%G>", localDate0, localDate0, (-4.884736560079213), (-4.884736560079213));
      double double0 = fatura0.getConsumo();
      assertEquals((-4.884736560079213), double0, 0.01);
      assertEquals((-4.884736560079213), fatura0.getCusto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Fatura fatura0 = new Fatura("4Au9V^>l))OxQ4", localDate0, localDate0, 0L, 0L);
      Fatura fatura1 = fatura0.clone();
      assertEquals(0.0, fatura1.getConsumo(), 0.01);
      assertEquals(0.0, fatura1.getCusto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura("", localDate0, localDate0, (-1000.4270089), (-1000.4270089));
      Fatura fatura1 = fatura0.clone();
      assertEquals((-1000.4270089), fatura1.getCusto(), 0.01);
      assertEquals((-1000.4270089), fatura1.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura("6$0\"5;}5~DG", localDate0, localDate0, 42.06917802329085, 42.06917802329085);
      fatura0.getPeriodo();
      assertEquals(42.06917802329085, fatura0.getCusto(), 0.01);
      assertEquals(42.06917802329085, fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura("6$0\"5;}5~DG", localDate0, localDate0, 42.06917802329085, 42.06917802329085);
      double double0 = fatura0.getConsumo();
      assertEquals(42.06917802329085, double0, 0.01);
      assertEquals(42.06917802329085, fatura0.getCusto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura("6$0\"5;}5~DG", localDate0, localDate0, 42.06917802329085, 42.06917802329085);
      String string0 = fatura0.toString();
      assertEquals("\nFatura para a casa de 6$0\"5;}5~DG\nPeriodo de 2014-02-14 a 2014-02-14\nConsumo: 42.1Kwh, Custo: 42.1\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura("6$0\"5;}5~DG", localDate0, localDate0, 42.06917802329085, 42.06917802329085);
      fatura0.getNome();
      assertEquals(42.06917802329085, fatura0.getCusto(), 0.01);
      assertEquals(42.06917802329085, fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura("6$0\"5;}5~DG", localDate0, localDate0, 42.06917802329085, 42.06917802329085);
      double double0 = fatura0.getCusto();
      assertEquals(42.06917802329085, double0, 0.01);
      assertEquals(42.06917802329085, fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura("6$0\"5;}5~DG", localDate0, localDate0, 42.06917802329085, 42.06917802329085);
      Fatura fatura1 = fatura0.clone();
      assertEquals(42.06917802329085, fatura1.getConsumo(), 0.01);
      assertEquals(42.06917802329085, fatura1.getCusto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fatura fatura0 = null;
      try {
        fatura0 = new Fatura((Fatura) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smarthouse.Fatura", e);
      }
  }
}
