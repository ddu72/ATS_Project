/*
 * This file was automatically generated by EvoSuite
 * Mon May 15 22:27:03 GMT 2023
 */

package main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import main.java.Fatura;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fatura_ESTest extends Fatura_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Fatura fatura0 = new Fatura((String) null, localDate0, localDate0, 0L, (-1.0));
      Fatura fatura1 = new Fatura(fatura0);
      assertEquals((-1.0), fatura1.getCusto(), 0.01);
      assertEquals(0.0, fatura1.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Fatura fatura0 = new Fatura((String) null, localDate0, localDate0, 0L, (-1.0));
      fatura0.getNome();
      assertEquals(0.0, fatura0.getConsumo(), 0.01);
      assertEquals((-1.0), fatura0.getCusto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura("", localDate0, localDate0, 1452.3790579318, 1452.3790579318);
      fatura0.getNome();
      assertEquals(1452.3790579318, fatura0.getCusto(), 0.01);
      assertEquals(1452.3790579318, fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Fatura fatura0 = new Fatura("[@KW@u)qB>O'Am1", localDate0, localDate0, 1.0, 0.0);
      double double0 = fatura0.getCusto();
      assertEquals(1.0, fatura0.getConsumo(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura("", localDate0, localDate0, 0.0, 1.0);
      double double0 = fatura0.getCusto();
      assertEquals(0.0, fatura0.getConsumo(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Fatura fatura0 = new Fatura((String) null, localDate0, localDate0, 0L, (-1.0));
      double double0 = fatura0.getConsumo();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1.0), fatura0.getCusto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      Fatura fatura0 = new Fatura("$lkK)PF7V+EB>a6", localDate0, localDate0, 1L, (-649.7));
      double double0 = fatura0.getConsumo();
      assertEquals((-649.7), fatura0.getCusto(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Fatura fatura0 = new Fatura("@", localDate0, localDate0, (-1L), 0.0);
      Fatura fatura1 = fatura0.clone();
      assertEquals((-1.0), fatura1.getConsumo(), 0.01);
      assertEquals(0.0, fatura1.getCusto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Fatura fatura0 = new Fatura((String) null, localDate0, localDate0, 0L, (-1.0));
      Fatura fatura1 = fatura0.clone();
      assertEquals((-1.0), fatura1.getCusto(), 0.01);
      assertEquals(0.0, fatura1.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      Fatura fatura0 = new Fatura("", localDate0, localDate0, 1L, 1L);
      Fatura fatura1 = fatura0.clone();
      assertEquals(1.0, fatura1.getCusto(), 0.01);
      assertEquals(1.0, fatura1.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fatura fatura0 = null;
      try {
        fatura0 = new Fatura((Fatura) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura(":XQGVEBhHz:Mo<F(]", localDate0, localDate0, (-23.068034134452382), (-23.068034134452382));
      fatura0.getPeriodo();
      assertEquals((-23.068034134452382), fatura0.getCusto(), 0.01);
      assertEquals((-23.068034134452382), fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura(":XQGVEBhHz:Mo<F(]", localDate0, localDate0, (-23.068034134452382), (-23.068034134452382));
      double double0 = fatura0.getCusto();
      assertEquals((-23.068034134452382), double0, 0.01);
      assertEquals((-23.068034134452382), fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura(":XQGVEBhHz:Mo<F(]", localDate0, localDate0, (-23.068034134452382), (-23.068034134452382));
      String string0 = fatura0.toString();
      assertEquals("\nFatura para a casa de :XQGVEBhHz:Mo<F(]\nPeriodo de 2014-02-14 a 2014-02-14\nConsumo: -23.1Kwh, Custo: -23.1\n", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura(":XQGVEBhHz:Mo<F(]", localDate0, localDate0, (-23.068034134452382), (-23.068034134452382));
      double double0 = fatura0.getConsumo();
      assertEquals((-23.068034134452382), fatura0.getCusto(), 0.01);
      assertEquals((-23.068034134452382), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Fatura fatura0 = new Fatura(":XQGVEBhHz:Mo<F(]", localDate0, localDate0, (-23.068034134452382), (-23.068034134452382));
      fatura0.getNome();
      assertEquals((-23.068034134452382), fatura0.getCusto(), 0.01);
      assertEquals((-23.068034134452382), fatura0.getConsumo(), 0.01);
  }
}
